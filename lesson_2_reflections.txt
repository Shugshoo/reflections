I am supposed to create a new file to track my lessons for Udacity's second GitHub lesson,
which is walking me through initializing a new GitHub repository (git init), checking the status
of the github repository I'm currently working in (git status) and adding a file to the "staging
area" (through git add <filename>) which is where all the files being tracked for the upcoming
commit are supposed to be logged prior to actually making a commit.


A little over a quarter way through the lesson I'm given the following prompts for reflection:
How can you use the staging area to make sure you have one commit per logical change?
By using "git diff --staged" to show all the differences between the staging area and the most
recent commit. If there are more changes than I mean to make in the particular bug / feature / 
other change I want to make, then I can edit the files or remove a file from the staging area 
before proceeding with the commit.

A little over halfway through the second lesson I'm prompted to think about:
How do the diagrams help you visualize the branch structure?
It makes branching points more obvious than simply referring to a commit number. But, if I'm honest,
they don't feel all that necessary.

The bigger thing I'm trying to remember, and to learn to the point that I can describe it well, is
the GitHub concept of "Reachability". A commit is "Reachable" from your current work if there is some common
commit in the existing history that can be reached both by your current directory/staging and by the commit
you want to reach, usually on another branch. If two commits share no common commit then they are considered
"unreachable"

I am more intrigued at this point about: How can you delete a branch you don't need/want anymore? For example,
if you create a branch that is purely unreachable from all other desired current commits, you might decide to
manually go through the changes in the files from all your unreachable commits, then manually try to add them
to the most recent branch, then commit them. If everything works in the new master commit, you would likely want
to delete the unreachable branch. How do you do this?

Also: Reachability clearly seems like a term we're taught as a precursor to performing an actual merge. It makes
sens ethat in orger to act on a merge there must be some shared, past common commit and you go through a process
of making sure the changes from all subsequent commits don't conflict with each other. This makes "Reachability",
or the ability to call out a common commit number as a starting point for the merge, as a likely pre-requisite
for any merging.


Reflect: Merging Two Branches (Friday 5/13 at Noon)
Well, I did merge the coin and master branch - but the resulting merged game.js file does not work. I went through some effort to try and fix it, but I appear to be pretty screwed.

I had the right idea for how to change the color of the coin giving the existing color definitions and object definitions for coins, ships, etc. But, correctly changing the color code on a game file that doesn't work is pretty pointless.

Update (Friday 5/13 at 3:40)
I was able to troubleshoot the error in my merged code by opening the inspector in chrome with the broken game.js file loaded. It 
pointed me to the lines of code which contained unexpected symbols. For some reason, lines 452, 475, and something else had added
weird lines like >>>>>HEAD which were throwing errors. I commented them out, updated the repo, updated the color code on the coin,
committed again, and now everything works as desired. Yay for progress!



Reflections "Automatic vs. Manual Merging"
So, it turns out the difficulty I was having above with those random lines of code was explicitly caused by the manual merge
process. When Git detects a real conflict with the same file modified by both branches, AND conflicting changes in given lines of
code, it "helpfully" inserts some code that's easy to find. The syntax looks like this:


<<<<<<<<<<<<HEAD  (This starts the section of contested code)

The code as the conflict looked in whichever branch you're currently working in.

|||||| merged common ancestors

The code as it existed in the shared common commit both branches share in their history

========== <name of second branch being merged>

The code as it existed in the branch being merged INTO the branch you're currently working in


The lines of code are presented in this way because it's supposed to help you debug the differences. But, you also do have to know
that those filler lines and their symbols need to be deleted before making the final commit, or else the resulting code won't work
as it's supposed to. This was definitely a case of learning by doing.

